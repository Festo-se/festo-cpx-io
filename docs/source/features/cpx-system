# CPX-SYSTEM

## festo-cpx-io 
python modbus implementation for festo cpx remote-io systems
### cpx-e
The automation system CPX-E is a high-performance control and automation system focusing primarily on motion control functions for handling technology. It comprises individual function modules that allow a very flexible system structure. Depending on the combination, the automation system CPE-X can be configured and used purely as a remote I/O system or as a control system. The following modules are available:
* Controller
* Bus modules
* Input/output modules
* Counter modules
* IO-Link master modules

In this implementation, the control (PLC) will be your pc. The cpx-system will be connected via modbus on ethernet/ip. Therefore the bus module CPX-E-EP is required to use this software.

#### import
Import the required cpx-system
```
from cpx_io.cpx_system.cpx_e.cpx_e import CpxE
```

#### Instantiate your cpx-system
You can use the typecode from your CPX order (www.festo.com) to get the correct modules and their order.
```
myCPX = CpxE("60E-EP-MLNINO", ip_address="172.16.1.40")
```
You can also instantiate an "empty" cpx system and add modules later. This requires to import the module itself first.
```
from cpx_io.cpx_system.cpx_e.e8do import CpxE8Do

myCPX = CpxE(ip_address="172.16.1.40")
e8do = myCPX.add_module(CpxE8Do())
```
You can also instantiate "empty" modules first and add them to the cpx system later. Either in the constructor or later via add_module()

```
from cpx_io.cpx_system.cpx_e.e8do import CpxE8Do
from cpx_io.cpx_system.cpx_e.eep import CpxEEP

# add via constructor. Here you should always provide the -EP module first
eep = CpxEEp()
e8do = CpxE8Do()
myCPX = CpxE(ip_address="172.16.1.40", modules=[eep, e8do])


# alternatively, add them later via add_module
eep = CpxEEp()
e8do = CpxE8Do()
myCPX = CpxE(ip_address="172.16.1.40") # this will already put an CpxEEp module on position 0
myCPX.add_module(e8Do)
```

#### write
Write channel value

### cpx-ap
