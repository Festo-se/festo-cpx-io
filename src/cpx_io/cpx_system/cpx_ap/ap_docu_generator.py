"""Documentation generator for AP systems"""

import json
from datetime import datetime


def generate_system_information_file(ap_system) -> None:
    """Saves a readable document that includes the system information in the apdd path"""
    module_data = []
    for m in ap_system.modules:
        parameter_data = []
        for p in m.parameters.values():
            parameter_data.append(
                {
                    "Id": p.parameter_id,
                    "Name": p.name,
                    "Description": p.description,
                    "R/W": "R/W" if p.is_writable else "R",
                    "Type": p.data_type,
                    "Size": (
                        p.array_size
                        if p.array_size and p.data_type != "ENUM_ID"
                        else ""
                    ),
                    "Instances": p.parameter_instances["NumberOfInstances"],
                }
            )
            # if enum data is available, add it to the last entry
            enum_data = p.enums.enum_values if p.enums else None
            if enum_data:
                parameter_data[-1]["Enums"] = enum_data

        module_data.append(
            {
                "Index": m.position,
                "Type": m.module_type,
                "Description": m.description,
                "Code": m.information.module_code,
                "AP Slot": m.position + 1,
                "FWVersion": m.information.fw_version,
                "Default Name": m.name,
                "Parameters": parameter_data,
            }
        )

    system_data = {
        "Information": "AP System description",
        "IP-Address": ap_system.ip_address,
        "Number of modules": len(ap_system.modules),
        "Modules": module_data,
    }

    # json
    with open(
        ap_system.docu_path
        + f"/system_information_{ap_system.ip_address.replace('.','-')}.json",
        "w",
        encoding="ascii",
    ) as f:
        f.write(json.dumps(system_data, indent=4))

    # markup
    with open(
        ap_system.docu_path
        + f"/system_information_{ap_system.ip_address.replace('.','-')}.md",
        "w",
        encoding="ascii",
    ) as f:
        f.write(f"# {system_data['Information']}\n")
        f.write(
            "Documentation of your AP system that is autogenerated by reading "
            "in all the information from all connected modules. This file will be "
            "updated everytime you make an instance of the CpxAp Object and is "
            "saved in the festo-cpx-io folder in your user directory depending on "
            f"your operating system *{ap_system.docu_path}*\n"
        )
        f.write(f"* IP-Address: {system_data['IP-Address']}\n")
        f.write(f"* Number of modules: {system_data['Number of modules']}\n")
        f.write(
            f"* Date of creation: {datetime.now().strftime('%d-%m-%Y %H:%M:%S')}"  # TODO generate above and put in json
        )
        f.write("\n# Modules\n")
        for m in module_data:
            f.write(f"\n## Index {m['Index']}: {m['Type']}\n")
            # it can happen that there is no description which leads to a "-" in the md file
            if len(m["Description"]) > 1:
                f.write(f"{m['Description']}\n")
            f.write(f"* Type: {m['Type']}\n")
            f.write(f"* Modul Code: {m['Code']}\n")
            f.write(f"* AP Slot: {m['AP Slot']}\n")
            f.write(f"* FWVersion: {m['FWVersion']}\n")
            f.write(f"* Default Name: {m['Default Name']}\n\n")
            f.write("Parameter Table: \n\n")
            f.write(
                "| Id | Name | Description | R/W | Type | Size | Instances | Enums |\n"
                "| -- | ---- | ----------- | --- | ---- | ---- | --------- | ----- |\n"
            )
            for p in m["Parameters"]:
                enums_str = "<ul>"
                if p.get("Enums"):
                    for k, v in p["Enums"].items():
                        enums_str += f"<li>{v}: {k}</li>"
                enums_str += "</ul>"
                description_corrected_newline = p["Description"].replace("\n", "<br>")
                f.write(
                    f"|{p['Id']}|{p['Name']}|{description_corrected_newline}|{p['R/W']}|{p['Type']}|"
                    f"{p['Size']}|{p['Instances']}|{enums_str}|\n"
                )
